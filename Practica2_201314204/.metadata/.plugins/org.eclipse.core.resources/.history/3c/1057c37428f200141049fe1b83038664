package juego;

import java.io.*;

import javax.swing.JOptionPane;

public class EscribirTex extends javax.swing.JFrame {
	
	    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
		public static Boolean estadoDesarrollo=true;
	    public static String directorio;
	    public static String nombreArchivoTexto="archivo.txt";  
	    
	
	    public EscribirTex() {
	        
	        if(estadoDesarrollo==true){            
	            directorio = System.getProperty("user.dir");
	        }else{            
	            directorio = System.getProperty("java.class.path"); 
	            File dir = new File(directorio);
	            directorio= dir.getParent();
	        }
	        
	        initComponents();
	    }

	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	    private void initComponents() {

	        btnCrear = new javax.swing.JButton();
	        btnLeer = new javax.swing.JButton();
	        btnEscribir = new javax.swing.JButton();
	        jScrollPane1 = new javax.swing.JScrollPane();
	        txtContenido = new javax.swing.JTextArea();

	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

	        btnCrear.setText("Crear");
	        btnCrear.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                btnCrearActionPerformed(evt);
	            }
	        });

	        btnLeer.setText("Leer");
	        btnLeer.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                btnLeerActionPerformed(evt);
	            }
	        });

	        btnEscribir.setText("Escribir");
	        btnEscribir.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                btnEscribirActionPerformed(evt);
	            }
	        });

	        txtContenido.setColumns(20);
	        txtContenido.setRows(5);
	        jScrollPane1.setViewportView(txtContenido);

	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
	                .addGap(42, 42, 42)
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
	                    .addComponent(jScrollPane1)
	                    .addGroup(layout.createSequentialGroup()
	                        .addComponent(btnCrear)
	                        .addGap(62, 62, 62)
	                        .addComponent(btnLeer)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
	                        .addComponent(btnEscribir)))
	                .addGap(42, 42, 42))
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addGap(31, 31, 31)
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(btnCrear)
	                    .addComponent(btnLeer)
	                    .addComponent(btnEscribir))
	                .addGap(18, 18, 18)
	                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(32, Short.MAX_VALUE))
	        );

	        pack();
	    }// </editor-fold>                        

	    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {                                         
	        // TODO add your handling code here:
	        // declaramos la variable archivo como un objeto File
	        // y le asignamos una ruta donde se creará
	         
	        try{
	            //BufferedWriter ayuda a manejar los streams
	            //FileWriter nos ayuda a escribir dentro de archivos
	            File archivo = new File (directorio+"/"+nombreArchivoTexto);
	            if (!archivo.exists()){
	                BufferedWriter bw = new BufferedWriter(new FileWriter(archivo));
	                //usamos el método .write para escribir la cadena
	                bw.write("Garabatos Linux\n"
	                    + "Conocimiento libre con software libre");            
	                //Muy importante, siempre cerrar el archivo.
	                bw.close();
	                txtContenido.setText(""); //Limpiamos el JTextArea si hubiera algo
	                JOptionPane.showMessageDialog(rootPane, "Archivo creado con éxito");
	            }else{
	                JOptionPane.showMessageDialog(rootPane, "El archivo ya existe");
	            }            
	        }catch(IOException e1){
	            JOptionPane.showMessageDialog(rootPane, "Error crear archivo");
	        }
	    }                                        

	    private void btnLeerActionPerformed(java.awt.event.ActionEvent evt) {                                        
	        // TODO add your handling code here:
	       String texto; //Variable para guardar la lectura
	       txtContenido.setText(""); //Limpiamos el JTextArea antes de comenzar
	        try{
	            // declaramos la variable archivo como un objeto File
	            // y le asignamos una ruta donde se creará
	            File archivo = new File (directorio+"/"+nombreArchivoTexto);
	            //BufferedReader ayuda a manejar las lecturas de streams
	            //FileWriter nos ayuda a mirar dentro del archivo
	            @SuppressWarnings("resource")
				BufferedReader br = new BufferedReader(new FileReader(archivo));
	            
	            //verificamos que el archivo exista
	            if(archivo.exists()){
	                //leemos dentro del archivo hasta finalizarlo
	                while ((texto=br.readLine())!=null){
	                    //Cada linea la agregamos al JTextArea
	                    txtContenido.append(texto+"\n");
	                }
	            }            
	        }catch (IOException ioe){
	            JOptionPane.showMessageDialog(rootPane, "Error al leer el archivo");
	        }        
	    }                                       

	    private void btnEscribirActionPerformed(java.awt.event.ActionEvent evt) {                                            
	        // TODO add your handling code here:
	        try{            
	            // declaramos la variable archivo como un objeto File
	            // y le asignamos una ruta donde se creará
	            File archivo = new File (directorio+"/"+nombreArchivoTexto);
	            if (archivo.exists()){                
	                //BufferedWriter ayuda a manejar los streams
	                //FileWriter nos ayuda a escribir dentro de archivos
	                BufferedWriter bw = new BufferedWriter(new FileWriter(archivo));
	                //usamos el método .write para escribir la cadena
	                bw.write(txtContenido.getText());            
	                //Muy importante, siempre cerrar el archivo.
	                bw.close();
	                txtContenido.setText(""); //Limpiamos el JTextArea por si hubiere algo
	                JOptionPane.showMessageDialog(rootPane, "Archivo guardado con éxito");
	            }            
	        }catch(IOException e1){
	            JOptionPane.showMessageDialog(rootPane, "Error al guardar en el archivo");
	        }
	    }                                           

	    /**
	     * @param args the command line arguments
	     */
	    public static void main(String args[]) {
	        /*
	         * Set the Nimbus look and feel
	         */
	        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	        /*
	         * If Nimbus (introduced in Java SE 6) is not available, stay with the
	         * default look and feel. For details see
	         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
	         */
	        try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(EscribirTex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(EscribirTex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(EscribirTex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(EscribirTex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
	        //</editor-fold>

	        /*
	         * Create and display the form
	         */
	        java.awt.EventQueue.invokeLater(new Runnable() {

	            public void run() {
	                new EscribirTex().setVisible(true);
	            }
	        });
	    }
	    // Variables declaration - do not modify                     
	    private javax.swing.JButton btnCrear;
	    private javax.swing.JButton btnEscribir;
	    private javax.swing.JButton btnLeer;
	    private javax.swing.JScrollPane jScrollPane1;
	    private javax.swing.JTextArea txtContenido;
	    // End of variables declaration                   
	}